name: "testing-001"
on:
  push:
    branches:
      - master

jobs:
  grab-random:
    permissions:
      contents: read
      id-token: write
    runs-on: "ubuntu-latest"
    steps:
      - id: "vault-login"
        name: "Login into Vault"
        #uses: hashicorp/vault-action@v2.4.1
        #with:
        #  exportToken: true
        #  url: "${{ secrets.VAULT_ADDR }}"
        #  role: "testing-001"
        #  method: "jwt"
        #  path: "jwt-github"
        #  jwtTtl: 360
        run: |
          set -euo pipefail
          __stdout=/proc/$$/fd/1
          gh_debug () {
              printf >"${__stdout}" '::debug::%s\n' "${@}"
          }

          mask () {
              local value="${1}"
              printf >"${__stdout}" '::add-mask::%s\n' "${value}"
          }

          mask_var () {
              local v="${1}"

              gh_debug "Masking variable '${v}'"
              mask "${!v}"
          }

          propagate () {
              local v="${1}"
              gh_debug "Exporting variable via env '${v}'"
              printf '%s=%s\n' "${v}" "${!v}" >> "${GITHUB_ENV}"
          }

          propagate_mask () {
              local v="${1}";
              propagate "${1}"
              mask_var "${1}"
          }

          get_gh_id_token () {
            local url="${ACTIONS_ID_TOKEN_REQUEST_URL}"
            local bearer="${ACTIONS_ID_TOKEN_REQUEST_TOKEN}"

            local audience="${1:-}"
            local curl_args=(
              -H "Authorization: Bearer ${bearer}"
              -H "User-Agent: actions/oidc-client"
              -H "Accept: application/json; api-version=2.0"
              -H "Content-Type: application/json"
            )

            [ -n "${audience}" ] && curl_args+=(--data-urlencode "audience=${audience}")
            response="$(curl -v -X POST -d "{}" "${curl_args[@]}" "${url}")"

            jq -r '.value' <<< "${response}" || {
              echo >"${__stdout}" "Failed to get ID token: ${response}"
              return 1
            }
          }

          vault_login_jwt () {
            local url="${1:-${VAULT_ADDR}}"
            local jwt="${2}"
            local role="${3:-}"
            local namespace="${4:-${VAULT_NAMESPACE}}"
            local mountpoint="${5:-jwt}"

            #gh_debug "[vault] Logging in via jwt (mount '${mountpoint}')"
            login_url="${url}/v1/${namespace:-}${namespace:+/}auth/${mountpoint}/login"
            payload="$(jq --rawfile jwt <(echo -n "${jwt}") --rawfile role <(echo -n "${role}") '{jwt: $jwt, role: $role} | with_entries(select(.value != ""))' <<< "{}")"
            response="$(curl -s -d @- "${login_url}" <<< "${payload}" | jq -cr)"
            mask_var response

            #_vault_check_error <<< "${response}"

            token="$(jq -r '.auth.client_token' <<< "${response}")"
            if [ -z "${token}" ]; then
                fail "Failed to obtain Vault token"
            fi

            VAULT_TOKEN="${token}"
            VAULT_ADDR="${url}"
            propagate_mask VAULT_TOKEN
            propagate_mask VAULT_ADDR

            if [ -n "${namespace}" ]; then
                VAULT_NAMESPACE="${namespace}"
                propagate_mask VAULT_NAMESPACE
            fi
          }

          set -x

          gh_token="$(get_gh_id_token)"
          vault_login_jwt "${{ secrets.VAULT_ADDR }}" "${gh_token}" "" "admin" "jwt-github"

      - id: "install-packages"
        name: "Install additional packages"
        run: |
          wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg >/dev/null
          gpg --no-default-keyring --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg --fingerprint
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt-get update
          sudo apt-get -y install jq vault

      - id: "test"
        name: "Test vault"
        run: |
          set -euo pipefail

          export VAULT_ADDR="${{ secrets.VAULT_ADDR }}"
          echo "Random bytes:"
          vault write -format=json sys/tools/random bytes=32 format=hex | jq -r '.data.random_bytes'
